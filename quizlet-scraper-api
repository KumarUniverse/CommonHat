APIFunction

In[73]:=api=APIFunction[\[IndentingNewLine]{"url"->"String"},\[IndentingNewLine]Function[\[IndentingNewLine]{input},\[IndentingNewLine]ExportForm[doSomething[input["url"]],"JSON"]\[IndentingNewLine]]\[IndentingNewLine]]

Out[73]=APIFunction[{url->String},Function[{input},ExportForm[doSomething[input[url]],JSON]]]

In[74]:=api[Association["url"->"data"]]

Out[74]=ExportForm[doSomething[data],JSON]

In[75]:=CloudDeploy[api,"junk/api",Permissions->"Public"]

Out[75]=InterpretationBox[RowBox[{"CloudObject", "[", TemplateBox[{"\"https://www.wolframcloud.com/objects/kylek/junk/api\"", "https://www.wolframcloud.com/objects/kylek/junk/api"}, "HyperlinkURL"], "]"}], CloudObject["https://www.wolframcloud.com/objects/kylek/junk/api"], SelectWithContents -> True]

API with real operation

In[41]:= url=URLEncode@ "https://quizlet.com/308050806/geometry-vocabulary-flash-cards/";

body=URLRead[URLDecode@url,"Body"];

New code

In[43]:= xml=ImportString[body,{"HTML","XMLObject"}];\[IndentingNewLine]words=Cases[xml,XMLElement[_,{"class"->"SetPageTerm-wordText"},___],Infinity];

In[45]:= listword =Cases[words, XMLElement[_,{"class"->"TermText notranslate lang-en"},bird___]:>First@bird,Infinity]

In[53]:= xml=ImportString[body,{"HTML","XMLObject"}];
defs=Cases[xml,XMLElement[_,{"class"->"SetPageTerm-definitionText"},___],Infinity]

In[56]:= listdefs = Cases[xml,XMLElement[_,{"class"->"TermText notranslate lang-en"},mice___]:>First@mice,Infinity]

write the underlying algorithm here

In[12]:= hackathonAPI[url_]:=Module[\[IndentingNewLine]{body,xml,words,defs},\[IndentingNewLine]body=URLRead[URLDecode@url,"Body"];\[IndentingNewLine]xml=ImportString[body,{"HTML","XMLObject"}];\[IndentingNewLine]
words=Part[Cases[xml,XMLElement[_,{"class"->"SetPageTerm-wordText"},___],Infinity],All,-1,-1,-1,1];\[IndentingNewLine]defs=Part[Cases[xml,XMLElement[_,{"class"->"SetPageTerm-definitionText"},___],Infinity],All,-1,-1,-1,1];\[IndentingNewLine]Thread[words->defs]\[IndentingNewLine]]

In[13]:= hackathonAPI[URLEncode@url="https://quizlet.com/353242389/art-history-flash-cards/";
];

TemplateBox[{"Set", "write", "\"RowBox[{\"Tag \", StyleBox[TagBox[\"URLEncode\", Function[Short[Slot[1], 5]]], ShowStringCharacters -> False], \" in \", StyleBox[TagBox[RowBox[{\"URLEncode\", \"[\", \"\\\"https://quizlet.com/246063369/biology-flash-cards/\\\"\", \"]\"}], Function[Short[Slot[1], 5]]], ShowStringCharacters -> False], \" is Protected.\"}]\"", 2, 13, 2, 30413052691356916300, "Local"}, "MessageTemplate"]

TemplateBox[{"ImportString", "string", "\"RowBox[{\"First argument \", StyleBox[TagBox[RowBox[{\"URLRead\", \"[\", RowBox[{RowBox[{\"URLDecode\", \"[\", \"Null\", \"]\"}], \",\", \"\\\"Body\\\"\"}], \"]\"}], Function[Short[Slot[1], 5]]], ShowStringCharacters -> False], \" is not a string.\"}]\"", 2, 13, 3, 30413052691356916300, "Local"}, "MessageTemplate"]

run all this to update API

In[14]:= api=APIFunction[\[IndentingNewLine]{"url"->"String"},\[IndentingNewLine]Function[\[IndentingNewLine]{input},\[IndentingNewLine]ExportForm[hackathonAPI[input["url"]],"JSON"]\[IndentingNewLine]]\[IndentingNewLine]]

Out[14]= APIFunction[{url->String},Function[{input},ExportForm[hackathonAPI[input[url]],JSON]]]

In[15]:= api[Association["url"->URLEncode@"https://quizlet.com/353242389/art-history-flash-cards/"]];

In[16]:= obj=CloudDeploy[api,"junk/api",Permissions->"Public"]

Out[16]= TagBox[InterpretationBox[RowBox[{"CloudObject", "[", TemplateBox[{"\"https://www.wolframcloud.com/objects/mukilankarthikeyan357/junk/api\"", "https://www.wolframcloud.com/objects/mukilankarthikeyan357/junk/api"}, "HyperlinkURL"], "]"}], CloudObject["https://www.wolframcloud.com/objects/mukilankarthikeyan357/junk/api"]], "RawBoxes"]

In[17]:= obj[[1]]

Out[17]= https://www.wolframcloud.com/objects/mukilankarthikeyan357/junk/api

test it

In[18]:= \[IndentingNewLine]test=StringJoin[\[IndentingNewLine]obj[[1]],\[IndentingNewLine]"?url=",\[IndentingNewLine]URLEncode@"https://quizlet.com/353242389/art-history-flash-cards/"\[IndentingNewLine]]

Out[18]= https://www.wolframcloud.com/objects/mukilankarthikeyan357/junk/api?url=https%3A%2F%2Fquizlet.com%2F353242389%2Fart-history-flash-cards%2F

In[14]:= URLRead[test,"Body"]

In[2]:= NotebookDirectory[]

development

Now I will import HTML, but first I need to know what elements of data I can get

In[93]:=Import["https://quizlet.com/353242389/art-history-flash-cards/","Elements"]

Out[93]={Data,FullData,Hyperlinks,ImageLinks,Images,Plaintext,Source,Title,XMLObject}

Now I will get the XML

In[164]:=body=URLRead["https://quizlet.com/353242389/art-history-flash-cards/","Body"];

In[165]:=xml=ImportString[body,{"HTML","XMLObject"}];

In[158]:=words=Part[Cases[xml,XMLElement[_,{"class"->"SetPageTerm-wordText"},___],Infinity],All,-1,-1,-1,1];

In[154]:=defs=Part[Cases[xml,XMLElement[_,{"class"->"SetPageTerm-definitionText"},___],Infinity],All,-1,-1,-1,1];

In[159]:=Thread[words->defs]

Out[159]={cubism->art movement in which objects were broken into geometric shapes then reassembles; artists that work in this style were Picasso and Braque,dada->began in 1920s often satirical; duchamp, man ray,expressionism->art that expressed emotions; van gogh, munch,fauvism->"wild beasts" vivid and colors that were not real or found in life; matisse,Impressionism->An artistic movement that sought to capture a momentary feel, or impression, of the piece they were drawing,minimalism->art that was simplified into basic colors and shapes, stella,op art->art that showed optical illusions; vassarely,pop art->art based on popular culture; Warhol, Thiebaud, Lichenstein,Renaissance art->considered the revival of classical learning, literature and art; Durer, Michelangelo; da vinci,surrealism->artwork based on dreams or fantasy; Dali, Magritte, Kahlo,Pointilism->a genre of painting characterized by the application of paint in dots and small strokes,Post-Impressionism->An artistic movement that expressed world that could not normally be seen, like dreams and fantasy.,Michelangelo->Painted the Sistine Chapel,Chuck Close->was a photorealist who was only interested in recording visual information not any insights into the portraits of his sitters. His canvases were very large and every aspect of the face could be seen on close viewing.,Francisco Goya->The Third of May is an example of social commitment.,Cubism->A style of art in which the subject matter is portrayed by geometric forms, especially cubes,Pieter Bruegel->Pieter Bruegel, "Peasant Wedding" is an example of,Georgia O'Keeffe->American artist that painted flowers and landscapes during the great depression.,Jackson Pollock->A twentieth-century American painter, famous for creating abstract paintings by dripping or pouring paint on a canvas in complex swirls and spatters.,Jan van Eyck->Flemish painter who was a founder of the Flemish school of painting and who pioneered modern techniques of oil painting (1390-1441),Modern Art->a general term for the huge changes in art in the 20th C. Much modern art is about the simplication and flattening of an image often to represent an essential aspect of reality instead of a representation of a visual scene (real or imagined,Edgar Degas->A nineteenth-century French painter and sculptor. Among his preferred subjects were ballet dancers and scenes of cafe life.,Roy Lichtenstein->was a pop artist who excerpted images from comic books using the ben-day dot system.,Mary Cassatt->American painter whose sensitive portrayals made her one of the prominent new impressionists,Wassily Kandinsky->abstract painter that worked in German that was one of the founders of the movement. In Painting with White Border, he sought to avoid representation altogether. Art should avoid any reference to visual reality and concentrate on lines, shapes and color.}

old stuff

In[121]:=StringCount[xml,"SetPageTerm-wordText"]

Out[121]=25

In[99]:=Cases[xml,"SetPageTerm-imageWrap",Infinity]

Out[99]={}

Since cases was successful and there was only 1, I can reliably import it

pos=Position[xml,"SetPage-termsList",Infinity]

Out[16]= {{2,3,2,3,4,3,10,3,1,3,2,3,1,3,3,3,1,3,1,3,1,2,1,2}}

{a,b,c}[[2]]

Out[19]= b

more=Part[pos,1,1;;-4]

Out[29]= {2,3,2,3,4,3,10,3,1,3,2,3,1,3,3,3,1,3,1,3,1}

good=Extract[xml,{more}]

Out[31]= InterpretationBox[TagBox[FrameBox[GridBox[{{ItemBox[TagBox[RowBox[{"{", RowBox[{"XMLElement", "[", RowBox[{"\"div\"", ",", RowBox[{"{", RowBox[{"\"class\"", "", "\"SetPage-termsList\""}], "}"}], ",", RowBox[{"{", RowBox[{RowBox[{"XMLElement", "[", RowBox[{"\"div\"", ",", RowBox[{"{", RowBox[{"\"class\"", "", "\"SetPage-term\""}], "}"}], ",", RowBox[{"{", RowBox[{"XMLElement", "[", RowBox[{"\"div\"", ",", RowBox[{"{", RowBox[{"\"class\"", "", "\"SetPageTerm is-showing has-image\""}], "}"}], ",", RowBox[{"{", RowBox[{"XMLElement", "[", TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "]"}], "}"}]}], "]"}], "}"}]}], "]"}], ",", TemplateBox[{"23"}, "OutputSizeLimit`Skeleton"], ",", RowBox[{"XMLElement", "[", RowBox[{"\"div\"", ",", RowBox[{"{", RowBox[{"\"class\"", "", "\"SetPage-term\""}], "}"}], ",", RowBox[{"{", RowBox[{"XMLElement", "[", TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "]"}], "}"}]}], "]"}]}], "}"}]}], "]"}], "}"}], Function[Short[Slot[1], 5]]], BaseStyle -> {Deployed -> False}, StripOnInput -> False]}, {ItemBox[GridBox[{{ItemBox[TagBox[TooltipBox[StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeBriefExplanation"], StandardForm], ImageSizeCache -> {196`, {8`, 27`}}], StripOnInput -> False, DynamicUpdating -> True], "OSLText", StripOnInput -> False], StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], StandardForm]], DynamicUpdating -> True, StripOnInput -> False]], Function[Annotation[Slot[1], Style[Dynamic[FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], DynamicUpdating -> True], "Tooltip"]]]], ItemBox[ButtonBox[PaneSelectorBox[{False -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], StandardForm], ImageSizeCache -> {160`, {1`, 27`}}], StripOnInput -> False, DynamicUpdating -> True], "OSLControl", StripOnInput -> False], True -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], StandardForm]], StripOnInput -> False, DynamicUpdating -> True], "OSLControlActive", StripOnInput -> False]}, Dynamic[CurrentValue["MouseOver"]], Alignment -> Center, FrameMargins -> 0, ImageSize -> {Automatic, 25}], Appearance -> None, BaselinePosition -> Baseline, ButtonFunction :> OutputSizeLimit`ButtonFunction[OutputSizeLimit`Defer, 31, 19362224601695524948, Times[5, Power[2, -1]]], Enabled -> True, Evaluator -> Automatic, Method -> "Queued"]], ItemBox[ButtonBox[PaneSelectorBox[{False -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], StandardForm], ImageSizeCache -> {187`, {1`, 27`}}], StripOnInput -> False, DynamicUpdating -> True], "OSLControl", StripOnInput -> False], True -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], StandardForm]], StripOnInput -> False, DynamicUpdating -> True], "OSLControlActive", StripOnInput -> False]}, Dynamic[CurrentValue["MouseOver"]], Alignment -> Center, FrameMargins -> 0, ImageSize -> {Automatic, 25}], Appearance -> None, BaselinePosition -> Baseline, ButtonFunction :> OutputSizeLimit`ButtonFunction[OutputSizeLimit`Defer, 31, 19362224601695524948, Times[5, 2]], Enabled -> True, Evaluator -> Automatic, Method -> "Queued"]], ItemBox[ButtonBox[PaneSelectorBox[{False -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], StandardForm], ImageSizeCache -> {138`, {1`, 27`}}], StripOnInput -> False, DynamicUpdating -> True], "OSLControl", StripOnInput -> False], True -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], StandardForm]], StripOnInput -> False, DynamicUpdating -> True], "OSLControlActive", StripOnInput -> False]}, Dynamic[CurrentValue["MouseOver"]], Alignment -> Center, FrameMargins -> 0, ImageSize -> {Automatic, 25}], Appearance -> None, BaselinePosition -> Baseline, ButtonFunction :> OutputSizeLimit`ButtonFunction[OutputSizeLimit`Defer, 31, 19362224601695524948, Infinity], Enabled -> True, Evaluator -> Automatic, Method -> "Queued"]], ItemBox[ButtonBox[PaneSelectorBox[{False -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], StandardForm], ImageSizeCache -> {174`, {69`, 39`}}], StripOnInput -> False, DynamicUpdating -> True], "OSLControl", StripOnInput -> False], True -> StyleBox[StyleBox[DynamicBox[ToBoxes[FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], StandardForm]], StripOnInput -> False, DynamicUpdating -> True], "OSLControlActive", StripOnInput -> False]}, Dynamic[CurrentValue["MouseOver"]], Alignment -> Center, FrameMargins -> 0, ImageSize -> {Automatic, 25}], Appearance -> None, BaselinePosition -> Baseline, ButtonFunction :> FrontEndExecute[{FrontEnd`SetOptions[FrontEnd`$FrontEnd, FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], FrontEnd`FrontEndToken["PreferencesDialog"]}], Evaluator -> None, Method -> "Preemptive"]]}}, AutoDelete -> False, FrameStyle -> GrayLevel[0.85`], GridBoxDividers -> {"Columns" -> {False, {True}}}, GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, GridBoxSpacings -> {"Columns" -> {{2}}}]]}}, DefaultBaseStyle -> "Column", GridBoxAlignment -> {"Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, GridBoxDividers -> {"Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, "RowsIndexed" -> {}}, GridBoxItemSize -> {"Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1`}}, "RowsIndexed" -> {}}, GridBoxSpacings -> {"Columns" -> {Offset[0.27999999999999997`], {Offset[0.5599999999999999`]}, Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {Offset[0.2`], Offset[1.2`], {Offset[0.4`]}, Offset[0.2`]}, "RowsIndexed" -> {}}], BaseStyle -> "OutputSizeLimit", FrameMargins -> {{12, 12}, {0, 15}}, FrameStyle -> GrayLevel[0.85`], RoundingRadius -> 5, StripOnInput -> False], Deploy, DefaultBaseStyle -> "Deploy"], If[SameQ[19362224601695524948, $SessionID], Out[31], CompoundExpression[Message[MessageName[Syntax, "noinfoker"]], Missing["NotAvailable"], Null]]]

Length@Cases[good,XMLElement[___],Infinity]

Out[33]= 326

Length@Cases[good,XMLElement["div",___],Infinity]

Out[35]= 276

In[51]:= terms=Cases[good,XMLElement[_,{"class"->"SetPage-term"},___],Infinity];

Part[terms,1]

Out[52]= XMLElement[div,{class->SetPage-term},{XMLElement[div,{class->SetPageTerm is-showing has-image},{XMLElement[div,{class->SetPageTerm-inner},{XMLElement[div,{class->SetPageTerm-contentWrapper},{XMLElement[div,{class->SetPageTerm-content},{XMLElement[div,{class->SetPageTerm-side},{XMLElement[div,{class->SetPageTerm-sideContent},{XMLElement[div,{class->SetPageTerm-wordText},{XMLElement[span,{class->TermText notranslate lang-en},{cubism}]}]}]}],XMLElement[div,{class->SetPageTerm-side SetPageTerm-largeSide},{XMLElement[div,{class->SetPageTerm-sideContent},{XMLElement[div,{class->SetPageTerm-definitionText},{XMLElement[span,{class->TermText notranslate lang-en},{art movement in which objects were broken into geometric shapes then reassembles; artists that work in this style were Picasso and Braque}]}]}]}]}]}]}]}]}]

Cases[Part[terms,1],XMLElement[_,{"class"->"SetPageTerm-wordText"},___],Infinity]

Out[53]= {XMLElement[div,{class->SetPageTerm-wordText},{XMLElement[span,{class->TermText notranslate lang-en},{cubism}]}]}

Cases[Part[terms,1],XMLElement[_,{"class"->"SetPageTerm-definitionText"},___],Infinity]

Out[54]= {XMLElement[div,{class->SetPageTerm-definitionText},{XMLElement[span,{class->TermText notranslate lang-en},{art movement in which objects were broken into geometric shapes then reassembles; artists that work in this style were Picasso and Braque}]}]}

Length@Cases[xml,XMLElement[_,{"class"->"SetPageTerm-image"},___],Infinity]

Out[63]= 0
